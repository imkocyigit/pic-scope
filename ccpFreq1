/* 
 * File:   ledy.c
 * Author: mete
 *
 * Created on January 29, 2019, 9:39 AM
 */
#include <pic18f4550.h>
#include <stdio.h>
#include <xc.h>
#include <float.h>
#pragma config PLLDIV = 5 , CPUDIV = OSC1_PLL2 , USBDIV = 2


#pragma config FOSC=HS
//#pragma config FOSC = XT_XT
//#pragma config FOSC = INTOSCIO_EC
#pragma PWRT = OFF;
#pragma config FCMEN = OFF                                 
#pragma config BORV = 3
#pragma config WDT = OFF
#pragma config LVP = OFF
#pragma config CPB = OFF
#pragma config CPD = OFF   

//#define E   LATDbits.LATD2;

/*#define RS  LATDbits.LATD1;
#define RW  LATDbits.LATD0;
#define DB0 LATDbits.LATD3;
#define DB1 LATEbits.LATE2;
#define DB2 LATEbits.LATE1;
#define DB3 LATCbits.LATC6;
#define DB4 LATCbits.LATC7;
#define DB5 LATDbits.LATD4;
#define DB6 LATDbits.LATD5;
#define DB7 LATDbits.LATD6;*/



typedef union  {   
    
    unsigned int data;
    struct  {
    unsigned DB0 :1;
    unsigned DB1 :1;
    unsigned DB2 :1;
    unsigned DB3 :1;
    unsigned DB4 :1;
    unsigned DB5 :1;
    unsigned DB6 :1;
    unsigned DB7 :1;       
    };
}accessiblebyte;


void sample_timer(unsigned int n)   {//1ms'lik delay fonksiyonu.for clock calibration.
    T0CON = 0b10001000; // Prescaler not assigned.                                    
    TMR0 = 65535 - (n/30);  // 30/signal period.       
    while(!TMR0IF);                                 
    TMR0IF=0;                                       
    
    T0CON = 0x00;                                       
}

void timer_ms(unsigned int n) //1ms'lik delay fonksiyonu.for clock calibration.
{
    unsigned int i;
    T0CON = 0x82;                                       
    for(i=0;i<n;i++) {
        TMR0 = 65535 - (8000000/(4*8*1000));         
        while(!TMR0IF);                                 
        TMR0IF=0;                                       
    }
    T0CON = 0x00;                                       
}


void delayzz()  {
    int i, j;
    for(i=0;i<500;i++) {
        for(j=0;j<2;j++)    {           /* 1ms civar? timer. */           
        }    
    }   
}

void tetikle() { // Enable pinini high to low yaparak tetiklemeyi saglar.
    
    LATDbits.LATD2 =1;
    LATDbits.LATD2 =0;
    delayzz();
    LATDbits.LATD2 =1;
}

void displaySil(){ //ekrani temizler. imleci basa yollar.
    
    LATDbits.LATD1 = 0; // RS
    LATDbits.LATD0 = 0; // RW
    
    LATDbits.LATD6 = 0; // DB7
    LATDbits.LATD5 = 0; // DB6
    LATDbits.LATD4 = 0; // DB5
    LATCbits.LATC7 = 0; // DB4
    
    LATCbits.LATC6 = 0; // DB3
    LATEbits.LATE1 = 0; // DB2
    LATEbits.LATE2 = 0; // DB1
    LATDbits.LATD3 = 1; // DB0

    delayzz();
    tetikle();
}

void dispONOFF(){ // Display acik. imlec kapali ve yanip sonmez.
    
    LATDbits.LATD1 = 0; // RS
    LATDbits.LATD0 = 0; // RW
    
    LATDbits.LATD6 = 0; // DB7
    LATDbits.LATD5 = 0; // DB6
    LATDbits.LATD4 = 0; // DB5
    LATCbits.LATC7 = 0; // DB4
    
    LATCbits.LATC6 = 1; // DB3
    LATEbits.LATE1 = 1; // DB2
    LATEbits.LATE2 = 0; // DB1
    LATDbits.LATD3 = 0; // DB0
    delayzz();
    tetikle();
}

void setFunc(){ // Fonksiyon ayarlari. Satir 1,5*8 matrix , 8 bit comm.
    
    LATDbits.LATD1 = 0; // RS
    LATDbits.LATD0 = 0; // RW
    
    LATDbits.LATD6 = 0; // DB7
    LATDbits.LATD5 = 0; // DB6
    LATDbits.LATD4 = 1; // DB5
    LATCbits.LATC7 = 1; // DB4
    
    LATCbits.LATC6 = 0; // DB3
    LATEbits.LATE1 = 0; // DB2
    LATEbits.LATE2 = 0; // DB1
    LATDbits.LATD3 = 0; // DB0
    delayzz();
    tetikle();
}

void setInput(){ // Giris ayarlari. LCD'de gosterilen her karakterden
    //sonra imlec 1 saga kayar.
    
    LATDbits.LATD1 = 0; // RS
    LATDbits.LATD0 = 0; // RW
    
    LATDbits.LATD6 = 0; // DB7
    LATDbits.LATD5 = 0; // DB6
    LATDbits.LATD4 = 0; // DB5
    LATCbits.LATC7 = 0; // DB4
    
    LATCbits.LATC6 = 0; // DB3
    LATEbits.LATE1 = 1; // DB2
    LATEbits.LATE2 = 1; // DB1
    LATDbits.LATD3 = 0; // DB0
    delayzz();
    tetikle();
}

void setDDRAM_ADDR( unsigned char D6,unsigned char D5,unsigned char D4,unsigned char D3,unsigned char D2,unsigned char D1,unsigned char D0 ){
    // addres must be  6-bit address.
    LATDbits.LATD1 = 0; // RS
    LATDbits.LATD0 = 0; // RW
    
    LATDbits.LATD6 = 1; // DB7
    
    LATDbits.LATD5 = D6; // DB6
    LATDbits.LATD4 = D5; // DB5
    LATCbits.LATC7 = D4; // DB4
    
    LATCbits.LATC6 = D3; // DB3
    LATEbits.LATE1 = D2; // DB2
    LATEbits.LATE2 = D1; // DB1
    LATDbits.LATD3 = D0; // DB0
    delayzz();
    tetikle();
}

void writeToRAMBIN(unsigned char D7,unsigned char D6,unsigned char D5,unsigned char D4,unsigned char D3,unsigned char D2,unsigned char D1,unsigned char D0){ //girilen degeri o anki cursora yazar.
    
    LATDbits.LATD1 = 1; // RS
    LATDbits.LATD0 = 0; // RW
    
    LATDbits.LATD6 = D7; // DB7
    
    LATDbits.LATD5 = D6; // DB6
    LATDbits.LATD4 = D5; // DB5
    LATCbits.LATC7 = D4; // DB4
    
    LATCbits.LATC6 = D3; // DB3
    LATEbits.LATE1 = D2; // DB2
    LATEbits.LATE2 = D1; // DB1
    LATDbits.LATD3 = D0; // DB0
    
    tetikle();
    
}

void writeToRAM(int a){ //Girilen int de?erinin kar??l???na gelen karakteri yazd?r?yor.
    accessiblebyte byte;
    byte.data=a;
    writeToRAMBIN(byte.DB7,byte.DB6,byte.DB5,byte.DB4,byte.DB3,byte.DB2,byte.DB1,byte.DB0);
    
}

void numbersToRAM(int a){
    if (a==9) writeToRAM(0x39);
    else if (a==8) writeToRAM(0x38);
    else if (a==7) writeToRAM(0x37);
    else if (a==6) writeToRAM(0x36);
    else if (a==5) writeToRAM(0x35);
    else if (a==4) writeToRAM(0x34);
    else if (a==3) writeToRAM(0x33);
    else if (a==2) writeToRAM(0x32);
    else if (a==1) writeToRAM(0x31);
    else if (a==0) writeToRAM(0x30);
    else writeToRAM(0x21);
    
}




void main(void) {
       
    accessiblebyte RAMbyte;
    int result=0;
                 // OUTPUT PINS FOR LCD
    TRISD = 0x00; // All PORT D pins assigned as output.
    TRISCbits.TRISC6 = 0;
    TRISCbits.TRISC7 = 0;
    TRISEbits.TRISE2 = 0;
    TRISEbits.TRISE1 = 0;
    
        //Data assigned for derivative operations.
    int datas[30];
    int derivdatas[29];
    int absderivdatas[29];
    
    TRISAbits.TRISA0=1; // Analog giris input olarak ayarlandi.
     
    TRISDbits.TRISD7=0;    //Debug LED
        // Variables assigned to calculate frequency.
    unsigned int signal_period,data1,data2;
    unsigned int Frequency;
    
    TRISCbits.TRISC2=1; //CCP 1 girisi. Pin 17
     
    
        
                   //ADC configs
    ADCON0=0b00000000; //Channel 0 (AN0)selected. ADC is disabled.
    ADCON1=0b00001110; // AN0 set as analog and VREFs set as Vdd and Vss.
    ADCON2=0b10001100; //Right justified. 4TOSC(FOSC/4). 2Tad.
    
    ADCON0bits.ADON = 1; // ADC enabled.
    
    dispONOFF();
    
    displaySil();
    
    setFunc();
    
    setInput();
    
    writeToRAMBIN(0,1,0,0,0,1,1,0); // F
 
    writeToRAMBIN(0,1,0,1,0,0,1,0); // R

    writeToRAMBIN(0,1,0,0,0,1,0,1); // E

    writeToRAMBIN(0,1,0,1,0,0,0,1); // Q

    
    RAMbyte.data = 0x3A;
    writeToRAMBIN(RAMbyte.DB7,RAMbyte.DB6,RAMbyte.DB5,RAMbyte.DB4,RAMbyte.DB3,RAMbyte.DB2,RAMbyte.DB1,RAMbyte.DB0);

    //OSCCON=0x62; //4MHz
    //INTCON=0b11000000;
    //PIE1=0x04;  		/* Enable Peripheral Interrupt */
    PIE1bits.CCP1IE=1;
    PIR1bits.CCP1IF=0;     
    CCP1CON=0x05;      /* Capture mode is selected for detecting Rising edge */
    SPPEN=0;
    
    TMR1IF=0;           
    //T1CON=0xC8;        /* 8-bit,no pre-scale,external clock,Timer OFF */
    T1CON = 0xC6;
    TMR1CS = 0;
    //T3CON = 0x00;
    //T1CON = 0x88;
    
    
 
    
    while (1)   {
        
        /*delayzz(); // Required time for Acquisition.
       
        ADCON0bits.GO=1; // Bu bit 1 oldugu surece cevirim bitmedi demek.
        
        while(ADCON0bits.GO == 1){}; // wait for conversion.
        
        result = (ADRESH<<8)+ADRESL;
        
        int prevADC = result-511;
        
        delayzz(); // Required time for Acquisition.
       
        ADCON0bits.GO=1; // Bu bit 1 oldugu surece cevirim bitmedi demek.
        
        while(ADCON0bits.GO == 1){}; // wait for conversion.
        
        result = (ADRESH<<8)+ADRESL;
        result =result - 511;
        
  
        }*/
        
        setDDRAM_ADDR(0,0,0,0,1,0,1); //Adres 5'e imleÃ§ gitti.
        CCPR1=0x00;         /*CCPR1 is cleared*/
        TMR1=0; 
        TMR1ON=1;           /* Turn-On Timer1 */
        
        while(!(PIR1bits.CCP1IF));  /*Wait for Interrupt flag which is generated when edge is detected*/
        data1 = CCPR1;              /*Copy count of 1st edge detected*/  
        PIR1bits.CCP1IF=0;
        
            
        while(!(PIR1bits.CCP1IF));  /*Wait for Interrupt flag which is generated when edge is detected*/
        data2 = CCPR1;              /*Copy count of 2nd edge detected*/
        PIR1bits.CCP1IF=0;
        
        
        if (data1 <= data2)  {
            
            
            signal_period=data2-data1;
            
            float Frequency = 1000000 /signal_period;
            
            unsigned int temp = Frequency;
            unsigned int onbins = (temp%100000)/10000;
            unsigned int bins=(temp%10000)/1000;
            unsigned int yuzs=(temp%1000)/100;
            unsigned int ons=(temp%100)/10;
            unsigned int ones=(temp%10);        
            
            numbersToRAM(onbins);
            numbersToRAM(bins);
            numbersToRAM(yuzs);
            numbersToRAM(ons);
            numbersToRAM(ones);
            
        }
        
        TMR1ON=0;
        delayzz();
        delayzz();
        delayzz();
        delayzz();
        delayzz();
        delayzz();
        delayzz();
        delayzz();
        delayzz();
        delayzz();
        delayzz();
        TMR1ON=1;
        
        
        
        

        /*unsigned int j=0;
        while(j<30) {
            sample_timer(signal_period);
            delayzz(); // Required time for Acquisition.       
            ADCON0bits.GO=1; // Bu bit 1 oldugu surece cevirim bitmedi demek.        
            while(ADCON0bits.GO == 1); // wait for conversion.        
            result = (ADRESH<<8)+ADRESL;
            datas[j]=result;
            j++;
        }
        j=1;
        
        
        while(j<29) {
            derivdatas[j]=(datas[j]-datas[j-1])/signal_period;
            j++;
        }
        j=0;
        
        while(j<29) {
            if(derivdatas[j]<= 0)   absderivdatas[j]=derivdatas[j]*(-1);
            else absderivdatas[j]=derivdatas[j];
            j++;
        }
        
        
        int count = 0, curr_cnt = 1, freq_num = 0, key = 0,k,m;
        for(k = 0; k < 28; k++)    {
            key = absderivdatas[k];
            for(j =k+1; j < 29; j++) {
                if(key == absderivdatas[m] && freq_num != key)  {
                    curr_cnt++;
                }
            }
            if(count < curr_cnt)    {
                count = curr_cnt; // frequency
                curr_cnt = 1;
                freq_num = key; //Most Frequent index
            }       
        }
        
        if(freq_num == 0 && count >= 17){
            setDDRAM_ADDR(0,0,1,0,0,0,1); //imlec sagdan 3. indekse gitti.
            writeToRAM(0x53);   //S
            writeToRAM(0x51);   //Q
            writeToRAM(0x55);   //U
            
        }// square wave
        
        if(freq_num == 1 && count >= 17){
            setDDRAM_ADDR(0,0,1,0,0,0,1); //imlec sagdan 3. indekse gitti.
            writeToRAM(0x54);   //T
            writeToRAM(0x52);   //R
            writeToRAM(0x69);   //i
            
        }// triangle wave
        
        if(freq_num != 1 && freq_num != 0 && count <= 17){
            setDDRAM_ADDR(0,0,1,0,0,0,1); //imlec sagdan 3. indekse gitti.
            writeToRAM(0x53);   //S
            writeToRAM(0x69);   //i
            writeToRAM(0x4E);   //N
            
        }// triangle wave
        
        
        */
    }
    
    
    
}


/*void __interrupt() ISR(void) {
    
}*/

